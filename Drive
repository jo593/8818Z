#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
brain_inertial = Inertial()
left_drive_smart = Motor(Ports.PORT7, 1, False)
right_drive_smart = Motor(Ports.PORT11, 1, True)

drivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)
controller = Controller()
arm = Motor(Ports.PORT8, False)
roller = Motor(Ports.PORT6, False)
shoot_motor_a = Motor(Ports.PORT9, True)
shoot_motor_b = Motor(Ports.PORT12, False)
shoot = MotorGroup(shoot_motor_a, shoot_motor_b)
touch = Touchled(Ports.PORT5)


def calibrate_drivetrain():
    # Calibrate the Drivetrain Inertial
    sleep(200, MSEC)
    brain.screen.print("Calibrating")
    brain.screen.next_row()
    brain.screen.print("Inertial")
    brain_inertial.calibrate()
    while brain_inertial.is_calibrating():
        sleep(25, MSEC)
    brain.screen.clear_screen()
    brain.screen.set_cursor(1, 1)



# define variables used for controlling motors based on controller inputs
drivetrain_l_needs_to_be_stopped_controller = False
drivetrain_r_needs_to_be_stopped_controller = False

# define a task that will handle monitoring inputs from controller
def rc_auto_loop_function_controller():
    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, remote_control_code_enabled
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            
            # calculate the drivetrain motor velocities from the controller joystick axies
            # left = axisA + axisC
            # right = axisA - axisC
            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()
            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()
            
            # check if the value is inside of the deadband range
            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:
                # check if the left motor has already been stopped
                if drivetrain_l_needs_to_be_stopped_controller:
                    # stop the left drive motor
                    left_drive_smart.stop()
                    # tell the code that the left motor has been stopped
                    drivetrain_l_needs_to_be_stopped_controller = False
            else:
                # reset the toggle so that the deadband code knows to stop the left motor next
                # time the input is in the deadband range
                drivetrain_l_needs_to_be_stopped_controller = True
            # check if the value is inside of the deadband range
            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:
                # check if the right motor has already been stopped
                if drivetrain_r_needs_to_be_stopped_controller:
                    # stop the right drive motor
                    right_drive_smart.stop()
                    # tell the code that the right motor has been stopped
                    drivetrain_r_needs_to_be_stopped_controller = False
            else:
                # reset the toggle so that the deadband code knows to stop the right motor next
                # time the input is in the deadband range
                drivetrain_r_needs_to_be_stopped_controller = True
            
            # only tell the left drive motor to spin if the values are not in the deadband range
            if drivetrain_l_needs_to_be_stopped_controller:
                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)
                left_drive_smart.spin(FORWARD)
            # only tell the right drive motor to spin if the values are not in the deadband range
            if drivetrain_r_needs_to_be_stopped_controller:
                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)
                right_drive_smart.spin(FORWARD)
        # wait before repeating the process
        wait(20, MSEC)

# define variable for remote controller enable/disable
remote_control_code_enabled = True

rc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)
#endregion VEXcode Generated Robot Configuration
# 	Project:      8818Z_Drive_2.0
# 	Author:       8818Z
# 	Created:      2022-11-21
#   Description:  2.0
# ------------------------------------------

# ------------------------------------------

# Library imports
from vex import *
# Begin project code
percisestatus = False
status = False
rapidstatus = False
armup = False
arm.set_max_torque(100,PERCENT)
punchstatus = False
arm.set_position(0,DEGREES)
def rapidfire():
    global rapidstatus
    if rapidstatus == True:
        shoot.set_velocity(30,PERCENT)
        rapidstatus = False
    else:
        shoot.stop()
        shoot.set_velocity(100,PERCENT)
        rapidstatus = True
        shoot.stop()


def armfunc():
    arm.spin_to_position(-377.50,DEGREES)
    arm.set_stopping(HOLD)
    while not controller.buttonRDown.pressing():
        pass
    arm.spin_to_position(0,DEGREES)
    
def togglepunch():
    global punchstatus
    if punchstatus == True:
        punchstatus = False
        shoot.stop()
    else:
        shoot.spin(REVERSE)
        punchstatus = True


def toggleroller():
    global status
    if status == False:
        roller.spin(REVERSE)
        status = True
    else:
        status = False
        roller.stop()
        
def rgb():
    while True:
        touch.set_fade(FadeType.SLOW)
        touch.set_color(Color.RED)
        wait(3,SECONDS)
        touch.set_color(Color.BLUE)
        wait(3,SECONDS)
        touch.set_color(Color.GREEN)
        wait(3,SECONDS)
        touch.set_color(Color.BLUE_GREEN)
        wait(3,SECONDS)
        touch.set_color(Color.WHITE)
        wait(3,SECONDS)
        touch.set_color(Color.PURPLE)
        wait(3,SECONDS)




def BrainData():
    while True:
        brain.screen.set_font(FontType.MONO15)
        brain.screen.print("ArmPos:" + str(arm.position(DEGREES)))
        brain.screen.set_cursor(2,1)
        brain.screen.print("RollStatus:" + str(status))
        brain.screen.set_cursor(3,1)
        brain.screen.print("axisA: " + str(controller.axisA.position()))
        brain.screen.set_cursor(4,1)
        brain.screen.print("axisC: " + str(controller.axisC.position()))
        wait(0.1,SECONDS)
        brain.screen.clear_screen()
        brain.screen.set_cursor(1,1)

def togglepercise():
    global percisestatus
    if percisestatus == True:
        percisestatus = False
        drivetrain.set_drive_velocity(100,PERCENT)
        drivetrain.set_turn_velocity(100,PERCENT)
    else:
        percisestatus = True
        drivetrain.set_drive_velocity(20,PERCENT)
        drivetrain.set_turn_velocity(10,PERCENT)


Thread(BrainData)
Thread(rgb)
#Thread(ConsoleData)
touch.set_brightness(100)
touch.set_color(Color.BLACK)
roller.set_max_torque(100,PERCENT)
roller.set_velocity(100,PERCENT)
shoot.set_max_torque(100,PERCENT)
shoot.set_velocity(30,PERCENT)
arm.set_max_torque(100,PERCENT)
controller.buttonFUp.pressed(togglepercise)
controller.buttonRDown.pressed(armfunc)
controller.buttonLUp.pressed(togglepunch)
controller.buttonLDown.pressed(rapidfire)
controller.buttonRUp.pressed(toggleroller)



